'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Inventory")>  _
Partial Public Class InventoryDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertGraphic(instance As Graphic)
    End Sub
  Partial Private Sub UpdateGraphic(instance As Graphic)
    End Sub
  Partial Private Sub DeleteGraphic(instance As Graphic)
    End Sub
  Partial Private Sub InsertCustOrder(instance As CustOrder)
    End Sub
  Partial Private Sub UpdateCustOrder(instance As CustOrder)
    End Sub
  Partial Private Sub DeleteCustOrder(instance As CustOrder)
    End Sub
  Partial Private Sub InsertUKCustomer(instance As UKCustomer)
    End Sub
  Partial Private Sub UpdateUKCustomer(instance As UKCustomer)
    End Sub
  Partial Private Sub DeleteUKCustomer(instance As UKCustomer)
    End Sub
#End Region

	Public Sub New()
		MyBase.New(Global.InventorySystem.My.MySettings.Default.ConnStr, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property Graphics() As System.Data.Linq.Table(Of Graphic)
		Get
			Return Me.GetTable(Of Graphic)
		End Get
	End Property

	Public ReadOnly Property CustOrders() As System.Data.Linq.Table(Of CustOrder)
		Get
			Return Me.GetTable(Of CustOrder)
		End Get
	End Property

	Public ReadOnly Property UKCustomers() As System.Data.Linq.Table(Of UKCustomer)
		Get
			Return Me.GetTable(Of UKCustomer)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Graphic")>
Partial Public Class Graphic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _seqno As Integer

	Private _gname As String

	Private _credate As Date

	Private _creuser As String

	Private _amddate As System.Nullable(Of Date)

	Private _amduser As String

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnseqnoChanging(value As Integer)
	End Sub
	Partial Private Sub OnseqnoChanged()
	End Sub
	Partial Private Sub OngnameChanging(value As String)
	End Sub
	Partial Private Sub OngnameChanged()
	End Sub
	Partial Private Sub OncredateChanging(value As Date)
	End Sub
	Partial Private Sub OncredateChanged()
	End Sub
	Partial Private Sub OncreuserChanging(value As String)
	End Sub
	Partial Private Sub OncreuserChanged()
	End Sub
	Partial Private Sub OnamddateChanging(value As System.Nullable(Of Date))
	End Sub
	Partial Private Sub OnamddateChanged()
	End Sub
	Partial Private Sub OnamduserChanging(value As String)
	End Sub
	Partial Private Sub OnamduserChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seqno", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property seqno() As Integer
		Get
			Return Me._seqno
		End Get
		Set
			If ((Me._seqno = Value) _
						= False) Then
				Me.OnseqnoChanging(Value)
				Me.SendPropertyChanging()
				Me._seqno = Value
				Me.SendPropertyChanged("seqno")
				Me.OnseqnoChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gname", DbType:="VarChar(25) NOT NULL", CanBeNull:=False)>
	Public Property gname() As String
		Get
			Return Me._gname
		End Get
		Set
			If (String.Equals(Me._gname, Value) = False) Then
				Me.OngnameChanging(Value)
				Me.SendPropertyChanging()
				Me._gname = Value
				Me.SendPropertyChanged("gname")
				Me.OngnameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credate", DbType:="DateTime NOT NULL")>
	Public Property credate() As Date
		Get
			Return Me._credate
		End Get
		Set
			If ((Me._credate = Value) _
						= False) Then
				Me.OncredateChanging(Value)
				Me.SendPropertyChanging()
				Me._credate = Value
				Me.SendPropertyChanged("credate")
				Me.OncredateChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creuser", DbType:="VarChar(25) NOT NULL", CanBeNull:=False)>
	Public Property creuser() As String
		Get
			Return Me._creuser
		End Get
		Set
			If (String.Equals(Me._creuser, Value) = False) Then
				Me.OncreuserChanging(Value)
				Me.SendPropertyChanging()
				Me._creuser = Value
				Me.SendPropertyChanged("creuser")
				Me.OncreuserChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amddate", DbType:="DateTime")>
	Public Property amddate() As System.Nullable(Of Date)
		Get
			Return Me._amddate
		End Get
		Set
			If (Me._amddate.Equals(Value) = False) Then
				Me.OnamddateChanging(Value)
				Me.SendPropertyChanging()
				Me._amddate = Value
				Me.SendPropertyChanged("amddate")
				Me.OnamddateChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amduser", DbType:="VarChar(25)")>
	Public Property amduser() As String
		Get
			Return Me._amduser
		End Get
		Set
			If (String.Equals(Me._amduser, Value) = False) Then
				Me.OnamduserChanging(Value)
				Me.SendPropertyChanging()
				Me._amduser = Value
				Me.SendPropertyChanged("amduser")
				Me.OnamduserChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustOrder")>
Partial Public Class CustOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _orderID As Integer

	Private _orderDate As Date

	Private _custID As String

	Private _orderTotal As Decimal

	Private _UKCustomer As EntityRef(Of UKCustomer)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnorderIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnorderIDChanged()
	End Sub
	Partial Private Sub OnorderDateChanging(value As Date)
	End Sub
	Partial Private Sub OnorderDateChanged()
	End Sub
	Partial Private Sub OncustIDChanging(value As String)
	End Sub
	Partial Private Sub OncustIDChanged()
	End Sub
	Partial Private Sub OnorderTotalChanging(value As Decimal)
	End Sub
	Partial Private Sub OnorderTotalChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._UKCustomer = CType(Nothing, EntityRef(Of UKCustomer))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property orderID() As Integer
		Get
			Return Me._orderID
		End Get
		Set
			If ((Me._orderID = Value) _
						= False) Then
				Me.OnorderIDChanging(Value)
				Me.SendPropertyChanging()
				Me._orderID = Value
				Me.SendPropertyChanged("orderID")
				Me.OnorderIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderDate", DbType:="Date NOT NULL")>
	Public Property orderDate() As Date
		Get
			Return Me._orderDate
		End Get
		Set
			If ((Me._orderDate = Value) _
						= False) Then
				Me.OnorderDateChanging(Value)
				Me.SendPropertyChanging()
				Me._orderDate = Value
				Me.SendPropertyChanged("orderDate")
				Me.OnorderDateChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="Char(10) NOT NULL", CanBeNull:=False)>
	Public Property custID() As String
		Get
			Return Me._custID
		End Get
		Set
			If (String.Equals(Me._custID, Value) = False) Then
				If Me._UKCustomer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncustIDChanging(Value)
				Me.SendPropertyChanging()
				Me._custID = Value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderTotal", DbType:="Decimal(10,2) NOT NULL")>
	Public Property orderTotal() As Decimal
		Get
			Return Me._orderTotal
		End Get
		Set
			If ((Me._orderTotal = Value) _
						= False) Then
				Me.OnorderTotalChanging(Value)
				Me.SendPropertyChanging()
				Me._orderTotal = Value
				Me.SendPropertyChanged("orderTotal")
				Me.OnorderTotalChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UKCustomer_CustOrder", Storage:="_UKCustomer", ThisKey:="custID", OtherKey:="custID", IsForeignKey:=True, DeleteOnNull:=True, DeleteRule:="CASCADE")>
	Public Property UKCustomer() As UKCustomer
		Get
			Return Me._UKCustomer.Entity
		End Get
		Set
			Dim previousValue As UKCustomer = Me._UKCustomer.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._UKCustomer.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._UKCustomer.Entity = Nothing
					previousValue.CustOrders.Remove(Me)
				End If
				Me._UKCustomer.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.CustOrders.Add(Me)
					Me._custID = Value.custID
				Else
					Me._custID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("UKCustomer")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>
Partial Public Class UKCustomer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _custID As String

	Private _custName As String

	Private _custCity As String

	Private _CustOrders As EntitySet(Of CustOrder)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OncustIDChanging(value As String)
	End Sub
	Partial Private Sub OncustIDChanged()
	End Sub
	Partial Private Sub OncustNameChanging(value As String)
	End Sub
	Partial Private Sub OncustNameChanged()
	End Sub
	Partial Private Sub OncustCityChanging(value As String)
	End Sub
	Partial Private Sub OncustCityChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CustOrders = New EntitySet(Of CustOrder)(AddressOf Me.attach_CustOrders, AddressOf Me.detach_CustOrders)
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custID", DbType:="Char(10) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property custID() As String
		Get
			Return Me._custID
		End Get
		Set
			If (String.Equals(Me._custID, Value) = False) Then
				Me.OncustIDChanging(Value)
				Me.SendPropertyChanging()
				Me._custID = Value
				Me.SendPropertyChanged("custID")
				Me.OncustIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custName", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)>
	Public Property custName() As String
		Get
			Return Me._custName
		End Get
		Set
			If (String.Equals(Me._custName, Value) = False) Then
				Me.OncustNameChanging(Value)
				Me.SendPropertyChanging()
				Me._custName = Value
				Me.SendPropertyChanged("custName")
				Me.OncustNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_custCity", DbType:="VarChar(25)")>
	Public Property custCity() As String
		Get
			Return Me._custCity
		End Get
		Set
			If (String.Equals(Me._custCity, Value) = False) Then
				Me.OncustCityChanging(Value)
				Me.SendPropertyChanging()
				Me._custCity = Value
				Me.SendPropertyChanged("custCity")
				Me.OncustCityChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UKCustomer_CustOrder", Storage:="_CustOrders", ThisKey:="custID", OtherKey:="custID")>
	Public Property CustOrders() As EntitySet(Of CustOrder)
		Get
			Return Me._CustOrders
		End Get
		Set
			Me._CustOrders.Assign(Value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CustOrders(ByVal entity As CustOrder)
		Me.SendPropertyChanging()
		entity.UKCustomer = Me
	End Sub

	Private Sub detach_CustOrders(ByVal entity As CustOrder)
		Me.SendPropertyChanging()
		entity.UKCustomer = Nothing
	End Sub
End Class
