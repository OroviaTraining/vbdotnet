'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Training")>  _
Partial Public Class TrainingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAsset(instance As Asset)
    End Sub
  Partial Private Sub UpdateAsset(instance As Asset)
    End Sub
  Partial Private Sub DeleteAsset(instance As Asset)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ConsoleApp1.My.MySettings.Default.ConnStr, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Assets() As System.Data.Linq.Table(Of Asset)
		Get
			Return Me.GetTable(Of Asset)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Asset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pID As Integer
	
	Private _pName As String
	
	Private _pCost As Decimal
	
	Private _pInstock As Boolean
	
	Private _creDate As Date
	
	Private _creUser As String
	
	Private _amdDate As System.Nullable(Of Date)
	
	Private _amdUser As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnpIDChanged()
    End Sub
    Partial Private Sub OnpNameChanging(value As String)
    End Sub
    Partial Private Sub OnpNameChanged()
    End Sub
    Partial Private Sub OnpCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnpCostChanged()
    End Sub
    Partial Private Sub OnpInstockChanging(value As Boolean)
    End Sub
    Partial Private Sub OnpInstockChanged()
    End Sub
    Partial Private Sub OncreDateChanging(value As Date)
    End Sub
    Partial Private Sub OncreDateChanged()
    End Sub
    Partial Private Sub OncreUserChanging(value As String)
    End Sub
    Partial Private Sub OncreUserChanged()
    End Sub
    Partial Private Sub OnamdDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnamdDateChanged()
    End Sub
    Partial Private Sub OnamdUserChanging(value As String)
    End Sub
    Partial Private Sub OnamdUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property pID() As Integer
		Get
			Return Me._pID
		End Get
		Set
			If ((Me._pID = value)  _
						= false) Then
				Me.OnpIDChanging(value)
				Me.SendPropertyChanging
				Me._pID = value
				Me.SendPropertyChanged("pID")
				Me.OnpIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property pName() As String
		Get
			Return Me._pName
		End Get
		Set
			If (String.Equals(Me._pName, value) = false) Then
				Me.OnpNameChanging(value)
				Me.SendPropertyChanging
				Me._pName = value
				Me.SendPropertyChanged("pName")
				Me.OnpNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pCost", DbType:="Decimal(9,2) NOT NULL")>  _
	Public Property pCost() As Decimal
		Get
			Return Me._pCost
		End Get
		Set
			If ((Me._pCost = value)  _
						= false) Then
				Me.OnpCostChanging(value)
				Me.SendPropertyChanging
				Me._pCost = value
				Me.SendPropertyChanged("pCost")
				Me.OnpCostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pInstock", DbType:="Bit NOT NULL")>  _
	Public Property pInstock() As Boolean
		Get
			Return Me._pInstock
		End Get
		Set
			If ((Me._pInstock = value)  _
						= false) Then
				Me.OnpInstockChanging(value)
				Me.SendPropertyChanging
				Me._pInstock = value
				Me.SendPropertyChanged("pInstock")
				Me.OnpInstockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creDate", DbType:="DateTime NOT NULL")>  _
	Public Property creDate() As Date
		Get
			Return Me._creDate
		End Get
		Set
			If ((Me._creDate = value)  _
						= false) Then
				Me.OncreDateChanging(value)
				Me.SendPropertyChanging
				Me._creDate = value
				Me.SendPropertyChanged("creDate")
				Me.OncreDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creUser", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property creUser() As String
		Get
			Return Me._creUser
		End Get
		Set
			If (String.Equals(Me._creUser, value) = false) Then
				Me.OncreUserChanging(value)
				Me.SendPropertyChanging
				Me._creUser = value
				Me.SendPropertyChanged("creUser")
				Me.OncreUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amdDate", DbType:="DateTime")>  _
	Public Property amdDate() As System.Nullable(Of Date)
		Get
			Return Me._amdDate
		End Get
		Set
			If (Me._amdDate.Equals(value) = false) Then
				Me.OnamdDateChanging(value)
				Me.SendPropertyChanging
				Me._amdDate = value
				Me.SendPropertyChanged("amdDate")
				Me.OnamdDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amdUser", DbType:="VarChar(100)")>  _
	Public Property amdUser() As String
		Get
			Return Me._amdUser
		End Get
		Set
			If (String.Equals(Me._amdUser, value) = false) Then
				Me.OnamdUserChanging(value)
				Me.SendPropertyChanging
				Me._amdUser = value
				Me.SendPropertyChanged("amdUser")
				Me.OnamdUserChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
