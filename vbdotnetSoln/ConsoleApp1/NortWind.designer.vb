'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")>  _
Partial Public Class NortWindDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ConsoleApp1.My.MySettings.Default.NorthConnStr, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CustomersByCountry")>  _
	Public Function CustomersByCountry(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Country", DbType:="NVarChar(15)")> ByVal country As String) As ISingleResult(Of CustomersByCountryResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country)
		Return CType(result.ReturnValue,ISingleResult(Of CustomersByCountryResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CountOrdersByCustomer")>
	Public Function CountOrdersByCustomer(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal orderCnt As System.Nullable(Of Integer)) As ISingleResult(Of CountOrdersByCustomerResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), orderCnt)
		Return CType(result.ReturnValue, ISingleResult(Of CountOrdersByCustomerResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CustomerID As String

	Private _CompanyName As String

	Private _ContactName As String

	Private _ContactTitle As String

	Private _Address As String

	Private _City As String

	Private _Region As String

	Private _PostalCode As String

	Private _Country As String

	Private _Phone As String

	Private _Fax As String

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCustomerIDChanging(value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property CustomerID() As String
		Get
			Return Me._CustomerID
		End Get
		Set
			If (String.Equals(Me._CustomerID, Value) = False) Then
				Me.OnCustomerIDChanging(Value)
				Me.SendPropertyChanging()
				Me._CustomerID = Value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, Value) = False) Then
				Me.OnCompanyNameChanging(Value)
				Me.SendPropertyChanging()
				Me._CompanyName = Value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, Value) = False) Then
				Me.OnContactNameChanging(Value)
				Me.SendPropertyChanging()
				Me._ContactName = Value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")>
	Public Property ContactTitle() As String
		Get
			Return Me._ContactTitle
		End Get
		Set
			If (String.Equals(Me._ContactTitle, Value) = False) Then
				Me.OnContactTitleChanging(Value)
				Me.SendPropertyChanging()
				Me._ContactTitle = Value
				Me.SendPropertyChanged("ContactTitle")
				Me.OnContactTitleChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, Value) = False) Then
				Me.OnAddressChanging(Value)
				Me.SendPropertyChanging()
				Me._Address = Value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, Value) = False) Then
				Me.OnCityChanging(Value)
				Me.SendPropertyChanging()
				Me._City = Value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
	Public Property Region() As String
		Get
			Return Me._Region
		End Get
		Set
			If (String.Equals(Me._Region, Value) = False) Then
				Me.OnRegionChanging(Value)
				Me.SendPropertyChanging()
				Me._Region = Value
				Me.SendPropertyChanged("Region")
				Me.OnRegionChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, Value) = False) Then
				Me.OnPostalCodeChanging(Value)
				Me.SendPropertyChanging()
				Me._PostalCode = Value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, Value) = False) Then
				Me.OnCountryChanging(Value)
				Me.SendPropertyChanging()
				Me._Country = Value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, Value) = False) Then
				Me.OnPhoneChanging(Value)
				Me.SendPropertyChanging()
				Me._Phone = Value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")>
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, Value) = False) Then
				Me.OnFaxChanging(Value)
				Me.SendPropertyChanging()
				Me._Fax = Value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged()
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class CustomersByCountryResult

	Private _CustomerID As String

	Private _CompanyName As String

	Private _ContactName As String

	Private _City As String

	Private _PostalCode As String

	Public Sub New()
		MyBase.New
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False)>
	Public Property CustomerID() As String
		Get
			Return Me._CustomerID
		End Get
		Set
			If (String.Equals(Me._CustomerID, Value) = False) Then
				Me._CustomerID = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, Value) = False) Then
				Me._CompanyName = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, Value) = False) Then
				Me._ContactName = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, Value) = False) Then
				Me._City = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, Value) = False) Then
				Me._PostalCode = Value
			End If
		End Set
	End Property
End Class

Partial Public Class CountOrdersByCustomerResult

	Private _CustomerID As String

	Private _Cnt As System.Nullable(Of Integer)

	Private _Total As System.Nullable(Of Decimal)

	Public Sub New()
		MyBase.New
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5)")>
	Public Property CustomerID() As String
		Get
			Return Me._CustomerID
		End Get
		Set
			If (String.Equals(Me._CustomerID, Value) = False) Then
				Me._CustomerID = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cnt", DbType:="Int")>
	Public Property Cnt() As System.Nullable(Of Integer)
		Get
			Return Me._Cnt
		End Get
		Set
			If (Me._Cnt.Equals(Value) = False) Then
				Me._Cnt = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="Money")>
	Public Property Total() As System.Nullable(Of Decimal)
		Get
			Return Me._Total
		End Get
		Set
			If (Me._Total.Equals(Value) = False) Then
				Me._Total = Value
			End If
		End Set
	End Property
End Class
